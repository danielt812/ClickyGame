{"version":3,"sources":["components/Nav/Nav.js","components/JumboTron/JumboTron.js","components/Card/Card.js","components/Wrapper/Wrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","score","rightWrong","topScore","JumboTron","Card","value","id","onClick","handleClick","alt","name","src","image","Wrapper","children","App","state","characters","clicked","console","log","_this","indexOf","handleIncrement","setState","concat","handleReset","updatedScore","handleShuffle","length","handleWin","shuffledCharacters","array","i","j","Math","floor","random","_ref","shuffleCharacters","_this2","this","Nav_Nav","components_JumboTron_JumboTron","components_Wrapper_Wrapper","map","character","components_Card_Card","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.dbc58a9b.chunk.js","sourcesContent":["import React from 'react';\nimport './Nav.css';\n\nconst NavBar = props => (\n  <ul className='nav nav-pills nav-fill'>\n    <li className='nav-item'>\n      <h2>\n        Score: <span className='rick'>{props.score}</span>\n      </h2>\n    </li>\n    <li className='nav-item'>\n      <h2 className='rick'>{props.rightWrong}</h2>\n    </li>\n    <li className='nav-item'>\n      <h2>\n        Top Score: <span className='rick'>{props.topScore}</span>\n      </h2>\n    </li>\n  </ul>\n);\n\nexport default NavBar;\n","import React from 'react';\nimport './JumboTron.css';\n\nconst JumboTron = () => (\n  <div className='jumbotron jumbotron-fluid'>\n    <div className='container'>\n      <h1 className='display-4'>Rick and Morty Memory Game</h1>\n      <h2 className='lead'>\n        Click on a character to earn points, but don't click on the same\n        character more than once!\n      </h2>\n    </div>\n  </div>\n);\n\nexport default JumboTron;\n","import React from \"react\";\nimport './Card.css';\n\nconst Card = (props) => {\n    // console.log(props);\n    return (\n    <div\n        className=\"card\"\n        value={props.id}\n        onClick={() => props.handleClick(props.id)}\n    >\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n    </div>\n)\n}\n\nexport default Card;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = (props) => (\n\n    <div className=\"wrapper\">{props.children}</div>\n\n)\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/Nav/Nav';\nimport JumboTron from './components/JumboTron/JumboTron';\nimport Card from './components/Card/Card';\nimport Wrapper from './components/Wrapper';\nimport characters from './characters.json';\n\nfunction shuffleCharacters(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  // Set initial state\n  state = {\n    characters,\n    score: 0,\n    topScore: 0,\n    rightWrong: '',\n    clicked: []\n  };\n\n  // Click function from Card component\n  handleClick = id => {\n    console.log(id);\n    // If this Card does not exist in clicked array (this.state.clicked)...\n    if (this.state.clicked.indexOf(id) === -1) {\n      // Run handleIncrement function\n      this.handleIncrement();\n      // Change state to push id into clicked array\n      this.setState(\n        {\n          clicked: this.state.clicked.concat(id)\n        },\n        () => console.log(this.state)\n      );\n    } else {\n      this.handleReset();\n    }\n  };\n\n  // This function will handle correct guesses\n  handleIncrement = () => {\n    const updatedScore = this.state.score + 1;\n    // Update State to show score and mark if card is right or wrong.\n    this.setState({\n      score: updatedScore,\n      rightWrong: 'You Guessed Correct!'\n    });\n    this.handleShuffle();\n    // If score is greater than high score. Update state for top score.\n    if (updatedScore >= this.state.topScore) {\n      this.setState({\n        topScore: updatedScore\n      });\n    }\n    if (updatedScore === characters.length) {\n      this.handleWin();\n    }\n  };\n\n  handleWin = () => {\n    // Reset score and shuffle\n    this.setState(\n      {\n        score: 0,\n        rightWrong: 'You Win!'\n      },\n      () => {\n        this.setState({ clicked: [] });\n      }\n    );\n    this.handleShuffle();\n  };\n\n  // This function will handle incorrect guesses\n  handleReset = () => {\n    // Set all state values except for top score back to original values\n    this.setState({\n      score: 0,\n      topScore: this.state.topScore,\n      rightWrong: 'You Guessed Wrong!',\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledCharacters = shuffleCharacters(characters);\n    this.setState({ characters: shuffledCharacters });\n  };\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          rightWrong={this.state.rightWrong}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <JumboTron />\n        <Wrapper>\n          {characters.map(character => (\n            <Card\n              key={character.id}\n              id={character.id}\n              name={character.name}\n              image={character.image}\n              handleClick={this.handleClick}\n              handleIncrement={this.handleIncrement}\n              handleReset={this.handleReset}\n              handleShuffle={this.handleShuffle}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}